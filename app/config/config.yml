imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    translator: ~
    templating:
        engines: ['twig']
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

sensio_framework_extra:
   router:
        annotations: false

ekino_wordpress:
    globals: # If you have some custom global variables that WordPress needs
        - wp_global_variable_1
        - wp_global_variable_2
    table_prefix: "wp_" # If you have a specific Wordpress table prefix
    wordpress_directory: "%kernel.root_dir%/../../../../wordpress"
    load_twig_extension: true # If you want to enable native WordPress functions (ie : get_option() => wp_get_option())
    enable_wordpress_listener: false # If you want to disable the WordPress request listener
    security:
        firewall_name: "secured_area" # This is the firewall default name
        login_url: "/wp-login.php" # Absolute URL to the wordpress login page



# Assetic Configuration
assetic:
    debug: "%kernel.debug%"
    use_controller: "%kernel.debug%"
    filters:
        cssrewrite: ~

old_sound_rabbit_mq:
    connections:
        default:
            host:     'localhost'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 3

            # requires php-amqplib v2.4.1+ and PHP5.4+
            keepalive: false

            # requires php-amqplib v2.4.1+
            heartbeat: 0

            #requires php_sockets.dll
            use_socket: true # default false
    producers:
        download_files:
            connection:       default
            exchange_options: {name: 'download-files', type: direct}
        parse_files:
            connection:       default
            exchange_options: {name: 'parse-files', type: direct}
        check_products:
            connection:       default
            exchange_options: {name: 'check-products', type: direct}
            #service_alias:    my_app_service # no alias by default
        update_products:
            connection:       default
            exchange_options: {name: 'update-products', type: direct}
            #service_alias:    my_app_service # no alias by default
        create_products:
            connection:       default
            exchange_options: {name: 'create-products', type: direct}
            #service_alias:    my_app_service # no alias by default
    consumers:
        download_file:
            connection:       default
            exchange_options: {name: 'download-files', type: direct}
            queue_options:    {name: 'download-file'}
            callback:         app.services.workers.downloadfiles
        parse_file:
            connection:       default
            exchange_options: {name: 'parse-files', type: direct}
            queue_options:    {name: 'parse-file'}
            callback:         app.services.workers.parsefiles
        check_product:
            connection:       default
            exchange_options: {name: 'check-products', type: direct}
            queue_options:    {name: 'check-product'}
            callback:         app.services.workers.checkproducts
        update_product:
            connection:       default
            exchange_options: {name: 'update-products', type: direct}
            queue_options:    {name: 'update-product'}
            callback:         app.services.workers.updateproducts
        create_product:
            connection:       default
            exchange_options: {name: 'create-products', type: direct}
            queue_options:    {name: 'create-product'}
            callback:         app.services.workers.createproducts
